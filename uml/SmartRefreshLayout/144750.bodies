class TwoLevelHeader
!!!214894.java!!!	TwoLevelHeader(inout context : Context)
        this(context, null);
!!!215022.java!!!	TwoLevelHeader(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!215150.java!!!	TwoLevelHeader(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        mSpinnerStyle = SpinnerStyle.FixedBehind;

        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.TwoLevelHeader);

        mMaxRage = ta.getFloat(R.styleable.TwoLevelHeader_srlMaxRage, mMaxRage);
        mFloorRage = ta.getFloat(R.styleable.TwoLevelHeader_srlFloorRage, mFloorRage);
        mRefreshRage = ta.getFloat(R.styleable.TwoLevelHeader_srlRefreshRage, mRefreshRage);
        mFloorDuration = ta.getInt(R.styleable.TwoLevelHeader_srlFloorDuration, mFloorDuration);
        mEnableTwoLevel = ta.getBoolean(R.styleable.TwoLevelHeader_srlEnableTwoLevel, mEnableTwoLevel);
        mEnablePullToCloseTwoLevel = ta.getBoolean(R.styleable.TwoLevelHeader_srlEnablePullToCloseTwoLevel, mEnablePullToCloseTwoLevel);

        ta.recycle();
!!!215278.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        final ViewGroup thisGroup = this;
        for (int i = 0, len = thisGroup.getChildCount(); i < len; i++) {
            View childAt = thisGroup.getChildAt(i);
            if (childAt instanceof RefreshHeader) {
                mWrapperView = childAt;
                mRefreshHeader = (RefreshHeader) childAt;
                thisGroup.bringChildToFront(childAt);
                break;
            }
        }
        if (mRefreshHeader == null) {
            mRefreshHeader = new RefreshHeaderWrapper(this);
        }
!!!215406.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        mSpinnerStyle = SpinnerStyle.MatchLayout;
        if (mRefreshHeader == null) {
            mRefreshHeader = new RefreshHeaderWrapper(this);
        }
!!!215534.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mSpinnerStyle = SpinnerStyle.FixedBehind;
!!!215662.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        if (mRefreshHeader.getView() != this) {
            int mode = MeasureSpec.getMode(heightMeasureSpec);
            if (mode == MeasureSpec.AT_MOST) {
                mRefreshHeader.getView().measure(widthMeasureSpec, heightMeasureSpec);
                int height = mRefreshHeader.getView().getMeasuredHeight();
                super.setMeasuredDimension(View.resolveSize(super.getSuggestedMinimumWidth(), widthMeasureSpec), height);
            } else {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            }
        } else {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
!!!215790.java!!!	getView() : View
        return this;
!!!215918.java!!!	onInitialized(inout kernel : RefreshKernel, in height : int, in maxDragHeight : int) : void
        final View thisView = this;
        if (1f * (maxDragHeight + height) / height != mMaxRage && mHeaderHeight == 0) {
            mHeaderHeight = height;
            kernel.getRefreshLayout().setHeaderMaxDragRate(mMaxRage);
            return;
        }
        if (!thisView.isInEditMode() && mRefreshHeader.getSpinnerStyle() == SpinnerStyle.Translate
                && mRefreshKernel == null) {
            MarginLayoutParams params = (MarginLayoutParams) mRefreshHeader.getView().getLayoutParams();
            params.topMargin -= height;
            mRefreshHeader.getView().setLayoutParams(params);
        }

//        RefreshKernel proxy = (RefreshKernel) Proxy.newProxyInstance(RefreshKernel.class.getClassLoader(), new Class[]{RefreshKernel.class}, this);
//        proxy.requestDrawBackgroundForHeader(0);
//        proxy.requestNeedTouchEventWhenRefreshing(false);

        mHeaderHeight = height;
        mRefreshKernel = kernel;
        mRefreshKernel.requestFloorDuration(mFloorDuration);
        mRefreshHeader.onInitialized(mRefreshKernel, height, maxDragHeight);
//        mRefreshHeader.onInitialized(proxy, height, maxDragHeight);
        mRefreshKernel.requestNeedTouchEventFor(this, !mEnablePullToCloseTwoLevel);
//        mRefreshKernel.requestNeedTouchEventWhenRefreshing(!mEnablePullToCloseTwoLevel);

//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && mPaint != null) {
//            mRefreshHeader.getView().animate().setUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
//                @Override
//                public void onAnimationUpdate(ValueAnimator animation) {
//                    if (animation.getAnimatedValue() instanceof Float) {
//                        mPaint.setAlpha(((int)((mRefreshHeader.getView().getAlpha())*mPaintAlpha)));
//                    }
//                }
//            });
//        }
!!!216046.java!!!	onStateChanged(inout refreshLayout : RefreshLayout, inout oldState : RefreshState, inout newState : RefreshState) : void
        mRefreshHeader.onStateChanged(refreshLayout, oldState, newState);
        switch (newState) {
            case TwoLevelReleased:
                if (mRefreshHeader.getView() != this) {
                    mRefreshHeader.getView().animate().alpha(0).setDuration(mFloorDuration / 2);
                }
//                if (mPaint != null) {
//                    invalidate();
//                }
                mRefreshKernel.startTwoLevel(mTwoLevelListener == null || mTwoLevelListener.onTwoLevel(refreshLayout));
                break;
            case TwoLevel:
                break;
            case TwoLevelFinish:
                if (mRefreshHeader.getView() != this) {
                    mRefreshHeader.getView().animate().alpha(1).setDuration(mFloorDuration / 2);
                }
                break;
            case PullDownToRefresh:
                if (mRefreshHeader.getView().getAlpha() == 0 && mRefreshHeader.getView() != this) {
                    mRefreshHeader.getView().setAlpha(1);
                }
                break;
        }
!!!216174.java!!!	onMoving(inout isDragging : boolean, in percent : float, in offset : int, in height : int, in maxDragHeight : int) : void
        moveSpinner(offset);
        mRefreshHeader.onMoving(isDragging, percent, offset, height, maxDragHeight);
        if (isDragging) {
            if (mPercent < mFloorRage && percent >= mFloorRage && mEnableTwoLevel) {
                mRefreshKernel.setState(RefreshState.ReleaseToTwoLevel);
            } else if (mPercent >= mFloorRage && percent < mRefreshRage) {
                mRefreshKernel.setState(RefreshState.PullDownToRefresh);
            } else if (mPercent >= mFloorRage && percent < mFloorRage) {
                mRefreshKernel.setState(RefreshState.ReleaseToRefresh);
            }
            mPercent = percent;
        }
!!!216302.java!!!	moveSpinner(in spinner : int) : void
        if (mSpinner != spinner && mRefreshHeader.getView() != this) {
            mSpinner = spinner;
            switch (mRefreshHeader.getSpinnerStyle()) {
                case Translate:
                    mRefreshHeader.getView().setTranslationY(spinner);
                    break;
                case Scale:{
                    View view = mRefreshHeader.getView();
                    view.layout(view.getLeft(), view.getTop(), view.getRight(), view.getTop() + Math.max(0, spinner));
                    break;
                }
            }
//            if (mPaint != null) {
//                invalidate();
//            }
        }
!!!216430.java!!!	setRefreshHeader(inout header : RefreshHeader) : TwoLevelHeader
        return setRefreshHeader(header, MATCH_PARENT, WRAP_CONTENT);
!!!216558.java!!!	setRefreshHeader(inout header : RefreshHeader, in width : int, in height : int) : TwoLevelHeader
        final ViewGroup thisGroup = this;
        if (header != null) {
            if (mRefreshHeader != null) {
                thisGroup.removeView(mRefreshHeader.getView());
            }
            this.mRefreshHeader = header;
            if (header.getSpinnerStyle() == SpinnerStyle.FixedBehind) {
                thisGroup.addView(mRefreshHeader.getView(), 0, new LayoutParams(width, height));
            } else {
                thisGroup.addView(mRefreshHeader.getView(), width, height);
            }
        }
        return this;
!!!216686.java!!!	setMaxRage(in rate : float) : TwoLevelHeader
        if (this.mMaxRage != rate) {
            this.mMaxRage = rate;
            if (this.mRefreshKernel != null) {
                this.mHeaderHeight = 0;
                this.mRefreshKernel.getRefreshLayout().setHeaderMaxDragRate(mMaxRage);
            }
        }
        return this;
!!!216814.java!!!	setEnablePullToCloseTwoLevel(inout enabled : boolean) : TwoLevelHeader
        this.mEnablePullToCloseTwoLevel = enabled;
        if (this.mRefreshKernel != null) {
            this.mRefreshKernel.requestNeedTouchEventFor(this, !enabled);
//            this.mRefreshKernel.requestNeedTouchEventWhenRefreshing(disable);
        }
        return this;
!!!216942.java!!!	setFloorRage(in rate : float) : TwoLevelHeader
        this.mFloorRage = rate;
        return this;
!!!217070.java!!!	setRefreshRage(in rate : float) : TwoLevelHeader
        this.mRefreshRage = rate;
        return this;
!!!217198.java!!!	setEnableTwoLevel(inout enabled : boolean) : TwoLevelHeader
        this.mEnableTwoLevel = enabled;
        return this;
!!!217326.java!!!	setFloorDuration(in duration : int) : TwoLevelHeader
        this.mFloorDuration = duration;
        return this;
!!!217454.java!!!	setOnTwoLevelListener(inout listener : OnTwoLevelListener) : TwoLevelHeader
        this.mTwoLevelListener = listener;
        return this;
!!!217582.java!!!	finishTwoLevel() : TwoLevelHeader
        this.mRefreshKernel.finishTwoLevel();
        return this;
