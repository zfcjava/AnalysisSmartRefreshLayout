class FunGameBattleCityHeader
!!!142702.java!!!	FunGameBattleCityHeader(inout context : Context)
        this(context, null);
!!!142830.java!!!	FunGameBattleCityHeader(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!142958.java!!!	FunGameBattleCityHeader(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        random = new Random();
!!!143086.java!!!	onInitialized(inout kernel : RefreshKernel, in height : int, in maxDragHeight : int) : void
        controllerSize = height / TANK_ROW_NUM;
        barrelSize = (int) Math.floor(controllerSize * TANK_BARREL_RATIO + .5f);
        bulletRadius = (barrelSize - 2 * DIVIDING_LINE_SIZE) * .5f;
        super.onInitialized(kernel, height, maxDragHeight);
!!!143214.java!!!	resetConfigParams() : void
        status = FunGameView.STATUS_GAME_PREPARE;
        controllerPosition = DIVIDING_LINE_SIZE;

        enemySpeed = DensityUtil.dp2px(1);
        bulletSpeed = DensityUtil.dp2px(4);

        levelNum = DEFAULT_TANK_MAGIC_TOTAL_NUM;
        wipeOutNum = 0;

        once = true;

        enemyTankSpace = controllerSize + barrelSize + DEFAULT_ENEMY_TANK_NUM_SPACING;
        bulletSpace = DEFAULT_BULLET_NUM_SPACING;

        eTankSparseArray = new SparseArray<>();
        for (int i = 0; i < TANK_ROW_NUM; i++) {
            Queue<RectF> rectFQueue = new LinkedList<>();
            eTankSparseArray.put(i, rectFQueue);
        }

        mBulletList = new LinkedList<>();
!!!143342.java!!!	generateEnemyTank(in index : int) : RectF
        float left = - (controllerSize + barrelSize);
        float top = index * (controllerSize) + DIVIDING_LINE_SIZE;
        return new RectF(left, top, left + barrelSize * 2.5f, top + controllerSize);
!!!143470.java!!!	getTrackIndex(in y : int) : int
        int index = y / (mHeaderHeight / TANK_ROW_NUM);
        index = index >= TANK_ROW_NUM ? TANK_ROW_NUM - 1 : index;
        index = index < 0 ? 0 : index;
        return  index;
!!!143598.java!!!	checkWipeOutETank(inout point : Point) : boolean
        boolean beHit = false;
        int trackIndex = getTrackIndex(point.y);
        RectF rectF = eTankSparseArray.get(trackIndex).peek();
        if (rectF != null && rectF.contains(point.x, point.y)) { // 击中
            if (++wipeOutNum == levelNum) {
                upLevel();
            }
            eTankSparseArray.get(trackIndex).poll();
            beHit = true;
        }
        return beHit;
!!!143726.java!!!	upLevel() : void
        levelNum += DEFAULT_TANK_MAGIC_TOTAL_NUM;
        enemySpeed += DensityUtil.dp2px(1);
        bulletSpeed += DensityUtil.dp2px(1);
        wipeOutNum = 0;

        if (enemyTankSpace > 12)
        enemyTankSpace -= 12;

        if (bulletSpace > 30)
        bulletSpace -= 30;
!!!143854.java!!!	checkTankCrash(in index : int, in selfX : float, in selfY : float) : boolean
        boolean isCrash = false;
        RectF rectF = eTankSparseArray.get(index).peek();
        if (rectF != null && rectF.contains(selfX, selfY)) {
            isCrash = true;
        }
        return isCrash;
!!!143982.java!!!	appearanceOption() : int
        return random.nextInt(TANK_ROW_NUM);
!!!144110.java!!!	drawGame(inout canvas : Canvas, in width : int, in height : int) : void
        drawSelfTank(canvas,width);
        if (status == STATUS_GAME_PLAY || status == STATUS_GAME_FINISHED || status == STATUS_GAME_FAIL) {
            drawEnemyTank(canvas,width);
            drawBulletPath(canvas,width);
        }
        final View thisView = this;
        if (thisView.isInEditMode()) {
            drawTank(canvas, new RectF(controllerSize, 0, controllerSize * 2, controllerSize));
            drawTank(canvas, new RectF(0, controllerSize, controllerSize, controllerSize*2));
            drawTank(canvas, new RectF(controllerSize * 3, controllerSize * 2, controllerSize * 4, controllerSize*3));
        }
!!!144238.java!!!	drawBulletPath(inout canvas : Canvas, in width : int) : void
        mPaint.setColor(mModelColor);
        offsetMBulletX += bulletSpeed;
        if (offsetMBulletX / bulletSpace == 1) {
            offsetMBulletX = 0;
        }

        if (offsetMBulletX == 0) {
            Point bulletPoint = new Point();
            bulletPoint.x = width - controllerSize - barrelSize;
            bulletPoint.y = (int) (controllerPosition + controllerSize * .5f);
            mBulletList.offer(bulletPoint);
        }

        boolean isOverStep = false;
        for (Point point : mBulletList) {
            if (checkWipeOutETank(point)) {
                usedBullet = point;
                continue;
            }
            if (point.x + bulletRadius <= 0) {
                isOverStep = true;
            }
            drawBullet(canvas, point);
        }

        if (isOverStep) {
            mBulletList.poll();
        }

        mBulletList.remove(usedBullet);
        usedBullet = null;
!!!144366.java!!!	drawBullet(inout canvas : Canvas, inout point : Point) : void
        point.x -= bulletSpeed;
        canvas.drawCircle(point.x, point.y, bulletRadius, mPaint);
!!!144494.java!!!	drawSelfTank(inout canvas : Canvas, in width : int) : void
        mPaint.setColor(rModelColor);
        boolean isAboveCrash = checkTankCrash(getTrackIndex((int) controllerPosition),
                width - controllerSize,
                controllerPosition);
        boolean isBelowCrash = checkTankCrash(getTrackIndex((int) (controllerPosition + controllerSize)),
                width - controllerSize,
                controllerPosition + controllerSize);

        if (isAboveCrash || isBelowCrash) {
            status = STATUS_GAME_OVER;
        }

        canvas.drawRect(width - controllerSize, controllerPosition + DIVIDING_LINE_SIZE,
                width, controllerPosition + controllerSize + DIVIDING_LINE_SIZE,
                mPaint);
        canvas.drawRect(width - controllerSize - barrelSize,
                controllerPosition + (controllerSize - barrelSize) * .5f,
                width - controllerSize,
                controllerPosition + (controllerSize - barrelSize) * .5f + barrelSize,
                mPaint);
!!!144622.java!!!	drawEnemyTank(inout canvas : Canvas, in width : int) : void
        mPaint.setColor(lModelColor);
        offsetETankX += enemySpeed;
        if (offsetETankX / enemyTankSpace == 1 || once) {
            offsetETankX = 0;
            once = false;
        }

        boolean isOverstep = false;
        int option = appearanceOption();
        for (int i = 0; i < TANK_ROW_NUM; i++) {
            Queue<RectF> rectFQueue = eTankSparseArray.get(i);

            if (offsetETankX == 0 && i == option) {
                rectFQueue.offer(generateEnemyTank(i));
            }

            for (RectF rectF : rectFQueue) {
                if (rectF.left >= width) {
                    isOverstep = true;
                    if (++overstepNum >= DEFAULT_TANK_MAGIC_TOTAL_NUM) {
                        status = STATUS_GAME_OVER;
                        break;
                    }
                    continue;
                }
                drawTank(canvas, rectF);
            }

            if (status == STATUS_GAME_OVER) break;
            if (isOverstep) {
                rectFQueue.poll();
                isOverstep = false;
            }
        }
        final View thisView = this;
        thisView.invalidate();
!!!144750.java!!!	drawTank(inout canvas : Canvas, inout rectF : RectF) : void
        rectF.set(rectF.left + enemySpeed, rectF.top, rectF.right + enemySpeed, rectF.bottom);
        canvas.drawRect(rectF, mPaint);
        float barrelTop = rectF.top + (controllerSize - barrelSize) * .5f;
        canvas.drawRect(rectF.right, barrelTop, rectF.right + barrelSize, barrelTop + barrelSize, mPaint);

