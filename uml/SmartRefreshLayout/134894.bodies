class StoreHouseHeader
!!!149614.java!!!	StoreHouseHeader(inout context : Context)
        this(context, null);
!!!149742.java!!!	StoreHouseHeader(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!149870.java!!!	StoreHouseHeader(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);

        DensityUtil density = new DensityUtil();
        mLineWidth = density.dip2px(1);
        mDropHeight = density.dip2px(40);
        mHorizontalRandomness = Resources.getSystem().getDisplayMetrics().widthPixels / 2;
        mBackgroundColor = 0xff333333;
        setTextColor(0xffcccccc);

        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.StoreHouseHeader);
        mLineWidth = ta.getDimensionPixelOffset(R.styleable.StoreHouseHeader_shhLineWidth, mLineWidth);
        mDropHeight = ta.getDimensionPixelOffset(R.styleable.StoreHouseHeader_shhDropHeight, mDropHeight);
        mEnableFadeAnimation = ta.getBoolean(R.styleable.StoreHouseHeader_shhEnableFadeAnimation, mEnableFadeAnimation);
        if (ta.hasValue(R.styleable.StoreHouseHeader_shhText)) {
            initWithString(ta.getString(R.styleable.StoreHouseHeader_shhText));
        } else {
            initWithString("StoreHouse");
        }
        ta.recycle();

        final View thisView = this;
        thisView.setMinimumHeight(mDrawZoneHeight + DensityUtil.dp2px(40));
!!!149998.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        final View thisView = this;
//        int height = getTopOffset() + mDrawZoneHeight + getBottomOffset();
//        heightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);
        super.setMeasuredDimension(
                View.resolveSize(super.getSuggestedMinimumWidth(), widthMeasureSpec),
                View.resolveSize(super.getSuggestedMinimumHeight(), heightMeasureSpec));

        mOffsetX = (thisView.getMeasuredWidth() - mDrawZoneWidth) / 2;
        mOffsetY = (thisView.getMeasuredHeight() - mDrawZoneHeight) / 2;//getTopOffset();
        mDropHeight = thisView.getMeasuredHeight() / 2;//getTopOffset();
!!!150126.java!!!	dispatchDraw(inout canvas : Canvas) : void

        final View thisView = this;
        final int c1 = canvas.save();
        final int len = mItemList.size();
        final float progress = thisView.isInEditMode() ? 1 : mProgress;

        for (int i = 0; i < len; i++) {

            canvas.save();
            StoreHouseBarItem storeHouseBarItem = mItemList.get(i);
            float offsetX = mOffsetX + storeHouseBarItem.midPoint.x;
            float offsetY = mOffsetY + storeHouseBarItem.midPoint.y;

            if (mIsInLoading) {
                storeHouseBarItem.getTransformation(thisView.getDrawingTime(), mTransformation);
                canvas.translate(offsetX, offsetY);
            } else {

                if (progress == 0) {
                    storeHouseBarItem.resetPosition(mHorizontalRandomness);
                    continue;
                }

                float startPadding = (1 - mInternalAnimationFactor) * i / len;
                float endPadding = 1 - mInternalAnimationFactor - startPadding;

                // done
                if (progress == 1 || progress >= 1 - endPadding) {
                    canvas.translate(offsetX, offsetY);
                    storeHouseBarItem.setAlpha(mBarDarkAlpha);
                } else {
                    float realProgress;
                    if (progress <= startPadding) {
                        realProgress = 0;
                    } else {
                        realProgress = Math.min(1, (progress - startPadding) / mInternalAnimationFactor);
                    }
                    offsetX += storeHouseBarItem.translationX * (1 - realProgress);
                    offsetY += -mDropHeight * (1 - realProgress);
                    mMatrix.reset();
                    mMatrix.postRotate(360 * realProgress);
                    mMatrix.postScale(realProgress, realProgress);
                    mMatrix.postTranslate(offsetX, offsetY);
                    storeHouseBarItem.setAlpha(mBarDarkAlpha * realProgress);
                    canvas.concat(mMatrix);
                }
            }
            storeHouseBarItem.draw(canvas);
            canvas.restore();
        }
        if (mIsInLoading) {
            thisView.invalidate();
        }
        canvas.restoreToCount(c1);

        super.dispatchDraw(canvas);
!!!150254.java!!!	setLoadingAniDuration(in duration : int) : StoreHouseHeader
        mLoadingAniDuration = duration;
        mLoadingAniSegDuration = duration;
        return this;
!!!150382.java!!!	setLineWidth(in width : int) : StoreHouseHeader
        mLineWidth = width;
        for (int i = 0; i < mItemList.size(); i++) {
            mItemList.get(i).setLineWidth(width);
        }
        return this;
!!!150510.java!!!	setTextColor(in color : int) : StoreHouseHeader
        mTextColor = color;
        for (int i = 0; i < mItemList.size(); i++) {
            mItemList.get(i).setColor(color);
        }
        return this;
!!!150638.java!!!	setDropHeight(in height : int) : StoreHouseHeader
        mDropHeight = height;
        return this;
!!!150766.java!!!	initWithString(in str : String) : StoreHouseHeader
        initWithString(str, 25);
        return this;
!!!150894.java!!!	initWithString(in str : String, in fontSize : int) : StoreHouseHeader
        List<float[]> pointList = StoreHousePath.getPath(str, fontSize * 0.01f, 14);
        initWithPointList(pointList);
        return this;
!!!151022.java!!!	initWithStringArray(in id : int) : StoreHouseHeader
        final View thisView = this;
        String[] points = thisView.getResources().getStringArray(id);
        List<float[]> pointList = new ArrayList<>();
        for (String point : points) {
            String[] x = point.split(",");
            float[] f = new float[4];
            for (int j = 0; j < 4; j++) {
                f[j] = Float.parseFloat(x[j]);
            }
            pointList.add(f);
        }
        initWithPointList(pointList);
        return this;
!!!151150.java!!!	setScale(in scale : float) : StoreHouseHeader
        mScale = scale;
        return this;
!!!151278.java!!!	initWithPointList(inout pointList : List<float[]>) : StoreHouseHeader

        float drawWidth = 0;
        float drawHeight = 0;
        boolean shouldLayout = mItemList.size() > 0;
        mItemList.clear();
        DensityUtil density = new DensityUtil();
        for (int i = 0; i < pointList.size(); i++) {
            float[] line = pointList.get(i);
            PointF startPoint = new PointF(density.dip2px(line[0]) * mScale, density.dip2px(line[1]) * mScale);
            PointF endPoint = new PointF(density.dip2px(line[2]) * mScale, density.dip2px(line[3]) * mScale);

            drawWidth = Math.max(drawWidth, startPoint.x);
            drawWidth = Math.max(drawWidth, endPoint.x);

            drawHeight = Math.max(drawHeight, startPoint.y);
            drawHeight = Math.max(drawHeight, endPoint.y);

            StoreHouseBarItem item = new StoreHouseBarItem(i, startPoint, endPoint, mTextColor, mLineWidth);
            item.resetPosition(mHorizontalRandomness);
            mItemList.add(item);
        }
        mDrawZoneWidth = (int) Math.ceil(drawWidth);
        mDrawZoneHeight = (int) Math.ceil(drawHeight);
        if (shouldLayout) {
            final View thisView = this;
            thisView.requestLayout();
        }
        return this;
!!!151406.java!!!	onInitialized(inout kernel : RefreshKernel, in height : int, in maxDragHeight : int) : void
//        kernel.requestDrawBackgroundForHeader(mBackgroundColor);
        mRefreshKernel = kernel;
        mRefreshKernel.requestDrawBackgroundFor(this, mBackgroundColor);
!!!151534.java!!!	onMoving(inout isDragging : boolean, in percent : float, in offset : int, in height : int, in maxDragHeight : int) : void
        mProgress = (percent * .8f);
        final View thisView = this;
        thisView.invalidate();
!!!151662.java!!!	onReleased(inout layout : RefreshLayout, in height : int, in maxDragHeight : int) : void
        mIsInLoading = true;
        mAniController.start();
        final View thisView = this;
        thisView.invalidate();
!!!151790.java!!!	onFinish(inout layout : RefreshLayout, inout success : boolean) : int
        mIsInLoading = false;
        mAniController.stop();
        if (success && mEnableFadeAnimation) {
            final View thisView = this;
            thisView.startAnimation(new Animation() {{
                super.setDuration(250);
                super.setInterpolator(new AccelerateInterpolator());
            }
                @Override
                protected void applyTransformation(float interpolatedTime, Transformation t) {
                    final View thisView = StoreHouseHeader.this;
                    mProgress = (1 - interpolatedTime);
                    thisView.invalidate();
                    if (interpolatedTime == 1) {
                        for (int i = 0; i < mItemList.size(); i++) {
                            mItemList.get(i).resetPosition(mHorizontalRandomness);
                        }
                    }
                }
            });
            return 250;
        } else {
            for (int i = 0; i < mItemList.size(); i++) {
                mItemList.get(i).resetPosition(mHorizontalRandomness);
            }
        }
        return 0;
!!!151918.java!!!	setPrimaryColors(in colors : int) : void
        if (colors.length > 0) {
            mBackgroundColor = colors[0];
            if (mRefreshKernel != null) {
//                mRefreshKernel.requestDrawBackgroundForHeader(colors[0]);
                mRefreshKernel.requestDrawBackgroundFor(this, mBackgroundColor);
            }
            if (colors.length > 1) {
                setTextColor(colors[1]);
            }
        }
